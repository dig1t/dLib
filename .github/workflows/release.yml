# https://github.com/nightcycle/occlusion-camera/blob/main/.github/workflows/release.yml

name: Release package

on:
  release:
    types: [published]

jobs:
  get_published_release:
    runs-on: ubuntu-latest

    outputs:
      release_id: ${{ steps.release_info.outputs.release_id }}
      upload_url: ${{ steps.release_info.outputs.upload_url }}
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      repo_desc: ${{ steps.release_info.outputs.repo_desc }}
      repo_name: ${{ steps.release_info.outputs.repo_name }}
      repo_owner_name: ${{ steps.release_info.outputs.repo_owner_name }}

    steps:
      - name: Set Release Info
        id: release_info
        run: |
          echo "::set-output name=tag_name::${{ github.event.release.tag_name }}"
          echo "::set-output name=release_id::${{ github.event.release.id }}"
          echo "::set-output name=upload_url::${{ github.event.release.upload_url }}"

          repo_owner_name=${{ github.repository_owner }}
          echo "::set-output name=repo_owner_name::$repo_owner_name"

          repo_name=${{ github.repository }}
          forward_repo_pattern="${repo_owner_name}/"
          empty_str=""
          repo_name="${repo_name/${forward_repo_pattern}/${empty_str}}"
          echo "::set-output name=repo_name::$repo_name"

          # Use the GitHub API to fetch the repository description
          description_prefix="\"description\":"
          curl -L "https://api.github.com/repos/${repo_owner_name}/${repo_name}" > desc.text
          desc=$(<desc.text)
          desc=$(echo "$desc" | grep -F "$description_prefix")
          desc="${desc/${description_prefix}/${empty_str}}"
          repo_desc=$(echo "$desc" | grep -o '"[^"]*"')
          echo "::set-output name=repo_desc::$repo_desc"

  publish:
    needs: get_published_release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Update files with new version
        shell: bash
        run: |
          repo_owner="${{needs.get_published_release.outputs.repo_owner_name}}"
          repo_name="${{needs.get_published_release.outputs.repo_name}}"
          repo_desc=${{needs.get_published_release.outputs.repo_desc}}
          goal_version_str="${{needs.get_published_release.outputs.tag_name}}"

          # read wally.toml file
          wally_toml_contents=$(<wally.toml)

          # swap out name
          target_name_line=$(echo "$wally_toml_contents" | grep -F "name = ")
          goal_name_line="name = \"${repo_owner}/${repo_name}\""
          wally_toml_contents="${wally_toml_contents/${target_name_line}/${goal_name_line}}"

          # swap out version
          target_version_line=$(echo "$wally_toml_contents" | grep -F "version = ")
          goal_version_line="version = \"${goal_version_str#v}\""
          wally_toml_contents="${wally_toml_contents/${target_version_line}/${goal_version_line}}"

          # swap out description
          target_desc_line=$(echo "$wally_toml_contents" | grep -F "description = ")
          goal_desc_line="description = \"${repo_desc}\""
          wally_toml_contents="${wally_toml_contents/${target_desc_line}/${goal_desc_line}}"

          # update wally.toml file
          echo "$wally_toml_contents" > wally.toml

          # read package.json file
          default_json_contents=$(<package.json)
          target_json_version_line=$(echo "$default_json_contents" | grep -F "\"version\": ")
          goal_json_version_line="  \"version\": \"${goal_version_str#v}\","
          default_json_contents="${default_json_contents/${target_json_version_line}/${goal_json_version_line}}"

          # update package.json file
          echo "$default_json_contents" > package.json

          # read README.md file
          readme_contents=$(<README.md)
          target_readme_version_line=$(echo "$readme_contents" | grep -F "${repo_name} = \"${repo_owner}/${repo_name}@")
          goal_readme_version_line="  ${repo_name} = \"${repo_owner}/${repo_name}@${goal_version_str#v}\""
          readme_contents="${readme_contents/${target_readme_version_line}/${goal_readme_version_line}}"

          # update README.md file
          echo "$readme_contents" > README.md

      - name: Install aftman dependencies
        uses: ok-nick/setup-aftman@v0.4.2

      - name: Install dependencies
        run: npm run build:dependencies

      - name: Amend the last commit
        run: |
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"
          git add --all
          git commit -m "Update to ${needs.get_published_release.outputs.tag_name}"
          git fetch origin HEAD:main
          git push origin HEAD:main --force-with-lease
          echo "Commit amended"

      - name: Build package
        run: rojo build -o ${{ needs.get_published_release.outputs.repo_name }}.rbxl build.project.json

      - name: Upload Roblox level file to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_published_release.outputs.upload_url }}
          asset_path: ${{ needs.get_published_release.outputs.repo_name }}.rbxl
          asset_name: ${{ needs.get_published_release.outputs.repo_name }}.rbxl
          asset_content_type: application/octet-stream
